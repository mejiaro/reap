<%= render PhlexUI::Dialog.new(open: true, data: { controller: "custom-dialog" }) do %>
  <%= render PhlexUI::Dialog::Trigger.new(class: "hidden", data: { custom_dialog_target: "trigger" }) do %>
    <%= render PhlexUI::Button.new { "Open Dialog" } %>
  <% end %>
  <%= render PhlexUI::Dialog::Content.new(class: "bg-white") do %>
    <%= turbo_frame_tag :modal do %>
      <%# TODO: cleanup this funny check with form_with(:model) after cleaning up with the other conflicting controller %>
      <%= form_with url: workspace_teams_path, method: :post, scope: user do |form| %>
        <div class="flex flex-col gap-y-4">
          <span class="font-semibold text-gray-600 text-lg">Add member</span>
          <%= content_tag(:div, class: "flex flex-col gap-y-4") do %>
            <%= render PhlexUI::Form::Item.new(class: "flex flex-col") do  %>
              <%= render PhlexUI::Label.new { "First Name" } %>
              <%= form.text_field :first_name, required: true, class: "border-gray-200 rounded-md w-full" %>
              <% user.errors.full_messages_for(:first_name).each do |message|%>
                <%= render PhlexUI::InputError.new(class: "w-full text-red-600 italic text-xs") { message }  %>
              <% end %>
            <% end %>
          <% end %>
          <%= content_tag(:div, class: "flex flex-col gap-y-4") do %>
            <%= render PhlexUI::Form::Item.new(class: "flex flex-col") do  %>
              <%= render PhlexUI::Label.new { "Last Name" } %>
              <%= form.text_field :last_name, required: true, class: "border-gray-200 rounded-md w-full" %>
              <% user.errors.full_messages_for(:last_name).each do |message|%>
                <%= render PhlexUI::InputError.new(class: "w-full text-red-600 italic text-xs") { message }  %>
              <% end %>
            <% end %>
          <% end %>
          <%= render PhlexUI::Form::Item.new do  %>
            <%= render PhlexUI::Label.new { "Role" } %>
            <%= render PhlexUI::Hint.new { "Kindly select organization user, if all this user will do is record time registrations." } %>
            <%= form.select :role, roles.map { |role| [role.to_s.humanize, role] }, { prompt: "Select role" }, required: true, class: "border-gray-200 rounded-md w-full" %>
            <% user.errors.full_messages_for(:role).each do |message|%>
              <%= render PhlexUI::InputError.new(class: "w-full text-red-600 italic text-xs") { message }  %>
            <% end %>
          <% end %>
          <%= content_tag(:div, class: "flex flex-col gap-y-4") do %>
            <%= render PhlexUI::Form::Item.new(class: "flex flex-col") do  %>
              <%= render PhlexUI::Label.new { "Email" } %>
              <%= form.email_field :email, required: true, class: "border-gray-200 rounded-md w-full" %>
              <% user.errors.full_messages_for(:email).each do |message|%>
                <%= render PhlexUI::InputError.new(class: "w-full text-red-600 italic text-xs") { message }  %>
              <% end %>
            <% end %>
          <% end %>
          <%= content_tag(:div, class: "flex flex-col gap-y-4") do %>
            <%= render PhlexUI::Form::Item.new(class: "flex flex-col") do  %>
              <%= render PhlexUI::Label.new { "Password" } %>
              <%= render PhlexUI::Hint.new { "Kindly share this temporary password with the user for login purposes. They can change it later on." } %>
              <%= form.password_field :password, required: true, class: "border-gray-200 rounded-md w-full" %>
              <% user.errors.full_messages_for(:password).each do |message|%>
                <%= render PhlexUI::InputError.new(class: "w-full text-red-600 italic text-xs") { message }  %>
              <% end %>
            <% end %>
          <% end %>
          <%= content_tag(:div, class: "flex flex-col gap-y-4") do %>
            <%= render PhlexUI::Form::Item.new(class: "flex flex-col") do  %>
              <%= render PhlexUI::Label.new { "Confirm password" } %>
              <%= form.password_field :password, required: true, class: "border-gray-200 rounded-md w-full" %>
              <% user.errors.full_messages_for(:password).each do |message|%>
                <%= render PhlexUI::InputError.new(class: "w-full text-red-600 italic text-xs") { message }  %>
              <% end %>
            <% end %>
          <% end %>
        </div>
        <%= render PhlexUI::Dialog::Footer.new(class: "mt-4 pt-4 border-t border-gray-100") do %>
          <%= render ButtonComponent.new(variant: :outline, data: { action: 'click->dismissable#dismiss' }) { "Cancel" } %>
          <%= render ButtonComponent.new(type: :submit) { "Save" } %>
        <% end %>
      <% end %>
    <% end %>
  <% end %>
<% end %>
